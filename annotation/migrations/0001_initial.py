# Generated by Django 3.0 on 2022-05-29 03:00

from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Annotated',
            fields=[
                ('aid', models.AutoField(help_text='annotated id', primary_key=True, serialize=False)),
                ('job_id', models.IntegerField(help_text='job id')),
                ('id', models.IntegerField(help_text='article id')),
                ('annotated', models.TextField(blank=True, help_text='annotated result', null=True)),
                ('is_annotated', models.BooleanField(default=False, help_text='whether the article is annotated')),
                ('visited', models.DateTimeField(auto_now=True)),
                ('duration', models.IntegerField(default=0, help_text='job duration (seconds)')),
            ],
            options={
                'db_table': 'annotated',
                'ordering': ['job_id', 'id'],
            },
        ),
        migrations.CreateModel(
            name='Article',
            fields=[
                ('id', models.AutoField(help_text='article id', primary_key=True, serialize=False)),
                ('doi', models.CharField(db_index=True, help_text='digital object unique identifier <DOI> of article', max_length=250)),
                ('title', models.CharField(blank=True, help_text='article title', max_length=1000, null=True)),
                ('au', models.TextField(blank=True, help_text='abbreviated names list of authors', null=True)),
                ('rp', models.TextField(blank=True, help_text='reprint author', null=True)),
                ('journal', models.CharField(blank=True, help_text='publication journal', max_length=250, null=True)),
                ('year', models.IntegerField(blank=True, help_text='publication year', null=True)),
                ('abstract', models.TextField(blank=True, help_text='abstract', null=True)),
                ('sentences', models.TextField(blank=True, help_text='segmented sentences of abstract', null=True)),
                ('num_segments', models.IntegerField(blank=True, help_text='number of segments', null=True)),
                ('transl_abstract', models.TextField(blank=True, help_text='translated abstract', null=True)),
                ('transl_sentences', models.TextField(blank=True, help_text='translated segmented sentences of abstract', null=True)),
                ('keyword', models.CharField(blank=True, help_text='keywords', max_length=1000, null=True)),
                ('wc', models.CharField(blank=True, help_text='research areas', max_length=250, null=True)),
                ('sc', models.CharField(blank=True, help_text='web of science categories', max_length=250, null=True)),
                ('sn', models.CharField(blank=True, help_text='unique identifier assigned to a newspaper, journal, yearbook, etc. < international standard serial number >', max_length=100, null=True)),
                ('cited', models.IntegerField(blank=True, default=0, help_text='cited references counts', null=True)),
                ('citing', models.IntegerField(blank=True, default=0, help_text='times cited counts in web of science database', null=True)),
                ('topic_id', models.IntegerField(blank=True, default=-1, help_text='topic id of article', null=True)),
                ('version', models.IntegerField(blank=True, default=1, help_text='version of article', null=True)),
            ],
            options={
                'db_table': 'article',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='Citation',
            fields=[
                ('id', models.AutoField(help_text='citation id', primary_key=True, serialize=False)),
                ('cite', models.CharField(db_index=True, help_text='article <DOI>', max_length=250)),
                ('cited', models.CharField(db_index=True, help_text='cited article <DOI>', max_length=250)),
            ],
            options={
                'db_table': 'citation',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='EmailVerifyRecord',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('uid', models.IntegerField(help_text='user id')),
                ('captcha', models.CharField(help_text='verification code', max_length=100)),
                ('is_valid', models.BooleanField(default=True, help_text='whether the link with captcha is valid')),
                ('send_type', models.CharField(choices=[('register', 'register'), ('reset', 'reset')], help_text='activate or forget password', max_length=10)),
                ('send_time', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'db_table': 'email_verify_record',
                'ordering': ['send_time'],
            },
        ),
        migrations.CreateModel(
            name='Job',
            fields=[
                ('job_id', models.AutoField(help_text='job id', primary_key=True, serialize=False)),
                ('uid', models.IntegerField(help_text='user id')),
                ('job_progress', models.IntegerField(default=0, help_text='number of articles have been annotated')),
                ('job_size', models.IntegerField(help_text='total number of articles to be annotated')),
                ('reward_progress', models.FloatField(default=0.0, help_text='current reward')),
                ('reward', models.FloatField(default=0.0, help_text='total reward')),
                ('status', models.IntegerField(choices=[(0, '进行中'), (1, '已完成'), (2, '已过期'), (3, '已支付')], help_text='job status')),
                ('job_type', models.IntegerField(choices=[(0, '系统分配'), (1, '自由申请')], help_text='job type')),
                ('created', models.DateTimeField(help_text='job created time')),
                ('finished', models.DateTimeField(blank=True, help_text='job finished time', null=True)),
                ('expired', models.DateTimeField(help_text='job expired time')),
                ('is_expired', models.BooleanField(default=False, help_text='whether the job is expired')),
            ],
            options={
                'db_table': 'job',
                'ordering': ['job_id'],
            },
        ),
        migrations.CreateModel(
            name='Reviewed',
            fields=[
                ('rid', models.AutoField(help_text='annotated id', primary_key=True, serialize=False)),
                ('id', models.IntegerField(help_text='article id')),
                ('uid', models.IntegerField(default=1, help_text='user id')),
                ('reviewed', models.TextField(blank=True, help_text='reviewed result', null=True)),
            ],
            options={
                'db_table': 'reviewed',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('uid', models.AutoField(help_text='user id', primary_key=True, serialize=False)),
                ('email', models.CharField(help_text='user email', max_length=50)),
                ('student_id', models.CharField(help_text='student id', max_length=20)),
                ('username', models.CharField(help_text='username', max_length=30)),
                ('name', models.CharField(help_text='real name', max_length=10)),
                ('phone_number', models.CharField(help_text='phone number', max_length=11)),
                ('gender', models.IntegerField(choices=[(0, 'male'), (1, 'female')], help_text='user gender')),
                ('education', models.IntegerField(choices=[(0, 'BS/BA'), (1, 'MS'), (2, 'PhD')], help_text='user education')),
                ('school', models.IntegerField(choices=[(0, '中国语言文学系'), (1, '外国语言文学学院'), (2, '历史学系'), (3, '旅游学系'), (4, '文物与博物馆学系'), (5, '哲学学院'), (6, '法学院'), (7, '国际关系与公共事务学院'), (8, '社会发展与公共政策学院'), (9, '新闻学院'), (10, '经济学院'), (11, '泛海国际金融学院'), (12, '马克思主义学院'), (13, '国际文化交流学院'), (14, '数学科学学院'), (15, '物理学系'), (16, '现代物理研究所/核科学与技术系'), (17, '化学系'), (18, '高分子科学系'), (19, '环境科学与工程系'), (20, '大气和海洋科学系'), (21, '信息科学与工程学院'), (22, '计算机科学技术学院'), (23, '软件学院'), (24, '微电子学院'), (25, '航天航空系'), (26, '材料科学系'), (27, '生命科学学院'), (28, '大数据学院'), (29, '管理学院'), (30, '基础医学院'), (31, '临床医学院'), (32, '公共卫生学院'), (33, '药学院'), (34, '护理学院'), (35, '继续教育学院'), (36, '体育教学部'), (37, '艺术教育中心'), (38, '分析测试中心'), (39, '实验动物科学部'), (40, '出土文献与古文字研究中心'), (41, '高等教育研究所'), (42, '古籍整理研究所'), (43, '国际问题研究院'), (44, '科技考古研究院'), (45, '六次产业研究院'), (46, '马克思主义研究院'), (47, '全球公共政策研究院'), (48, '社会科学高等研究院'), (49, '文史研究院'), (50, '一带一路及全球治理研究院'), (51, '中国历史地理研究所'), (52, '中国研究院'), (53, '大气科学研究院'), (54, '大数据试验场研究院'), (55, '大数据研究院'), (56, '代谢与整合生物学研究院'), (57, '复杂体系多尺度研究院'), (58, '工程与应用技术研究院'), (59, '类脑芯片与片上智能系统研究院'), (60, '类脑智能科学与技术研究院'), (61, '人类表型组研究院'), (62, '上海数学中心'), (63, '手性分子工程中心'), (64, '微纳电子器件与量子计算机研究院'), (65, '先进材料实验室'), (66, '智能复杂体系基础理论与关键技术'), (67, '智能机器人研究院'), (68, '放射医学研究所'), (69, '脑科学研究院'), (70, '生物医学研究院'), (71, '其他')], help_text='school')),
                ('password', models.CharField(help_text='password of registered user', max_length=500)),
                ('role', models.IntegerField(choices=[(0, 'unactivated'), (1, 'activated'), (2, 'accessed'), (3, 'reviewer')], default=0, help_text='role')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'db_table': 'user_profile',
                'ordering': ['uid'],
            },
        ),
    ]
